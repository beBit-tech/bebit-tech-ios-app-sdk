// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OmniSegmentKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import Alamofire
import Combine
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class OSGProduct {
  public var price: Swift.Int?
  public var category: Swift.String?
  public var brand: Swift.String?
  public var quantity: Swift.Int?
  public var variant: Swift.String?
  public var sku: Swift.String?
  public var position: Swift.Int?
  public init(id: Swift.String, name: Swift.String)
  public func appendAttribute(_ key: Swift.String, value: Any)
  public func appendAttributes(_ attrs: [Swift.String : Any])
  @objc deinit
}
public class OSGRecommendRequest : Swift.Codable {
  public var productIds: [Swift.String]?
  public var productTags: [Swift.String]?
  public var productCategories: [Swift.String]?
  public var excludedProductIds: [Swift.String]?
  public var excludedProductTags: [Swift.String]?
  public enum `Type` : Swift.String, Swift.Codable {
    case userItemEmbedding
    case alsoBought
    case alsoViewed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(_ type: OmniSegmentKit.OSGRecommendRequest.`Type`, quantity: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class OSGRecommendProduct : Swift.Codable {
  final public let id: Swift.String
  final public let name: Swift.String
  final public let price: Swift.String
  final public let urlString: Swift.String
  final public let imageURLString: Swift.String
  final public let additionalImages: [OmniSegmentKit.OSGAdditionalImage]
  final public let specialPrice: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class OSGAdditionalImage : Swift.Codable {
  final public let name: Swift.String
  final public let urlString: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class OmniSegment : ObjectiveC.NSObject {
  @objc(initialize:withTid:) public static func initialize(_ key: Swift.String, tid: Swift.String)
  @objc public static func enableDebugLogs(_ enable: Swift.Bool = true)
  public static func login(uid: Swift.String)
  public static func logout()
  public static func setFCMToken(_ token: Swift.String)
  public static func setCurrentPage(_ pageId: Swift.String)
  public static func trackEvent(_ event: OmniSegmentKit.OSGEvent)
  #if compiler(>=5.3) && $AsyncAwait
  public static func fetchRecommendProduct(_ request: OmniSegmentKit.OSGRecommendRequest) async -> [OmniSegmentKit.OSGRecommendProduct]
  #endif
  public static func fetchRecommendProduct(_ request: OmniSegmentKit.OSGRecommendRequest) -> Combine.Future<[OmniSegmentKit.OSGRecommendProduct], Swift.Never>
  public static func fetchRecommendProduct(_ request: OmniSegmentKit.OSGRecommendRequest, completion: @escaping ([OmniSegmentKit.OSGRecommendProduct]) -> Swift.Void)
  public static func setBundleId(_ id: Swift.String)
  public static func setAppName(_ name: Swift.String)
  public static func setBundleVersion(_ version: Swift.String)
  public static func setDeviceId(_ id: Swift.String)
  public static func setUid(uid: Swift.String)
  public static func clearUid()
  public static func setWebViewLocation(_ location: Swift.String)
  public static func resetWebViewLocation()
  @objc override dynamic public init()
  @objc deinit
}
extension OmniSegmentKit.OmniSegment {
  public func changeEventApiEndpoint(_ endpoint: Swift.String)
  public func changeRecommendApiEndpoint(_ endpoint: Swift.String)
  public func changeBackgroundServiceURL(_ url: Swift.String)
}
public enum OSGEventSource : Swift.String {
  case app, web
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventHitType : Swift.String {
  case pageView, event
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventAction : Swift.String {
  case addToCart, removeFromCart, checkout, refund, search, formFillOut
  case viewContent, purchase, addToWishlist, completeRegistration, clickProduct
  case webPopupImpression, webPopupClick, webPopupInteraction, webPopupClose
  case appOpen, login, logout, appUnsubscribe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventCategory : Swift.String {
  case clickFooter, viewContent, ecommerce, completeRegistration
  case sort, filter, clickMenu, search, formFillOut, webPopup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class OSGEvent {
  public typealias Source = OmniSegmentKit.OSGEventSource
  public typealias HitType = OmniSegmentKit.OSGEventHitType
  public typealias Action = OmniSegmentKit.OSGEventAction
  public typealias Category = OmniSegmentKit.OSGEventCategory
  public var userId: Swift.String?
  public var deviceId: Swift.String
  public var bundleId: Swift.String
  public var bundleVersion: Swift.String
  public var appName: Swift.String
  public var source: OmniSegmentKit.OSGEvent.Source
  public var location: Swift.String?
  public var locationTitle: Swift.String?
  public var products: [OmniSegmentKit.OSGProduct]?
  public var currencyCode: Swift.String?
  public var transactionId: Swift.String?
  public var transactionRevenue: Swift.Int?
  public var transactionTax: Swift.String?
  public var transactionShipping: Swift.String?
  public var transactionCouponCode: Swift.String?
  public var label: [Swift.String : Any]?
  public var value: Swift.String?
  public init(from data: [Swift.String : Any])
  public func appendAttribute(_ key: Swift.String, value: Any)
  public func appendAttributes(_ attrs: [Swift.String : Any])
  public func setCategory(_ category: OmniSegmentKit.OSGEvent.Category?)
  public func changeHitType(to type: OmniSegmentKit.OSGEvent.HitType)
  @objc deinit
}
extension OmniSegmentKit.OSGEvent {
  public static func appOpen() -> OmniSegmentKit.OSGEvent
  public static func appUnsubscribe() -> OmniSegmentKit.OSGEvent
  public static func productImpression(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func productClicked(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func addToWishlist(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func addToCart(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func removeFromCart(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func checkout(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func purchase(_ transactionId: Swift.String, revenue: Swift.Int, products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func refund(_ transactionId: Swift.String, revenue: Swift.Int, products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  public static func completeRegistration(label: [Swift.String : Any]) -> OmniSegmentKit.OSGEvent
  public static func search(label: [Swift.String : Any]) -> OmniSegmentKit.OSGEvent
  public static func custom(action: Swift.String, value: Swift.String? = nil) -> OmniSegmentKit.OSGEvent
}
extension WebKit.WKWebViewConfiguration {
  public func addOmniSegmentContentController()
}
extension OmniSegmentKit.OSGRecommendRequest.`Type` : Swift.Equatable {}
extension OmniSegmentKit.OSGRecommendRequest.`Type` : Swift.Hashable {}
extension OmniSegmentKit.OSGRecommendRequest.`Type` : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventSource : Swift.Equatable {}
extension OmniSegmentKit.OSGEventSource : Swift.Hashable {}
extension OmniSegmentKit.OSGEventSource : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventHitType : Swift.Equatable {}
extension OmniSegmentKit.OSGEventHitType : Swift.Hashable {}
extension OmniSegmentKit.OSGEventHitType : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventAction : Swift.Equatable {}
extension OmniSegmentKit.OSGEventAction : Swift.Hashable {}
extension OmniSegmentKit.OSGEventAction : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventCategory : Swift.Equatable {}
extension OmniSegmentKit.OSGEventCategory : Swift.Hashable {}
extension OmniSegmentKit.OSGEventCategory : Swift.RawRepresentable {}
