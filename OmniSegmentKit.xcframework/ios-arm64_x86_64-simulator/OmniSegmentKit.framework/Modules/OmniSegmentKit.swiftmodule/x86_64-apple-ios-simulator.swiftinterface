// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OmniSegmentKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import Alamofire
import Combine
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class OSGProduct : ObjectiveC.NSObject {
  @objc public var price: Foundation.NSNumber?
  @objc public var category: Swift.String?
  @objc public var brand: Swift.String?
  @objc public var quantity: Foundation.NSNumber?
  @objc public var variant: Swift.String?
  @objc public var sku: Swift.String?
  @objc public var position: Foundation.NSNumber?
  @objc public init(id: Swift.String, name: Swift.String)
  @objc public func appendAttribute(_ key: Swift.String, value: Any)
  @objc public func appendAttributes(_ attrs: [Swift.String : Any])
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 13, *)
@objc public class OmniSegment : ObjectiveC.NSObject {
  @objc(initialize:withTid:) public static func initialize(_ key: Swift.String, tid: Swift.String)
  @objc public static func enableDebugLogs(_ enable: Swift.Bool = true)
  @objc public static func login(uid: Swift.String)
  @objc public static func logout()
  @objc public static func setFCMToken(_ token: Swift.String)
  @objc public static func setCurrentPage(_ pageId: Swift.String)
  @objc public static func trackEvent(_ event: OmniSegmentKit.OSGEvent)
  @objc public static func setBundleId(_ id: Swift.String)
  @objc public static func setAppName(_ name: Swift.String)
  @objc public static func setBundleVersion(_ version: Swift.String)
  @objc public static func setDeviceId(_ id: Swift.String)
  @objc public static func setUid(uid: Swift.String)
  @objc public static func clearUid()
  @objc public static func setWebViewLocation(_ location: Swift.String)
  @objc public static func resetWebViewLocation()
  @objc public static func setPopupRedirectCallback(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public static func handleNotification(userInfo: [Swift.AnyHashable : Any])
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, *)
extension OmniSegmentKit.OmniSegment {
  @objc dynamic public func changeEventApiEndpoint(_ endpoint: Swift.String)
  @objc dynamic public func changeBackgroundServiceURL(_ url: Swift.String)
  @objc dynamic public func changeApiHost(_ host: Swift.String)
}
public enum OSGEventSource : Swift.String {
  case app, web
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventHitType : Swift.String {
  case pageView, event
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventAction : Swift.String {
  case addToCart, removeFromCart, checkout, refund, search, formFillOut
  case viewContent, purchase, addToWishlist, completeRegistration, clickProduct
  case webPopupImpression, webPopupClick, webPopupInteraction, webPopupClose, webPopupCloseByOverlay
  case appOpen, login, logout, appUnsubscribe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OSGEventCategory : Swift.String {
  case clickFooter, viewContent, ecommerce, completeRegistration
  case sort, filter, clickMenu, search, formFillOut, webPopup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class OSGEvent : ObjectiveC.NSObject {
  public typealias Source = OmniSegmentKit.OSGEventSource
  public typealias HitType = OmniSegmentKit.OSGEventHitType
  public typealias Action = OmniSegmentKit.OSGEventAction
  public typealias Category = OmniSegmentKit.OSGEventCategory
  @objc public var userId: Swift.String?
  @objc public var deviceId: Swift.String
  @objc public var bundleId: Swift.String
  @objc public var bundleVersion: Swift.String
  @objc public var appName: Swift.String
  public var source: OmniSegmentKit.OSGEvent.Source
  @objc public var location: Swift.String?
  @objc public var locationTitle: Swift.String?
  @objc public var products: [OmniSegmentKit.OSGProduct]?
  @objc public var currencyCode: Swift.String?
  @objc public var transactionId: Swift.String?
  @objc public var transactionRevenue: Foundation.NSNumber?
  @objc public var transactionTax: Swift.String?
  @objc public var transactionShipping: Swift.String?
  @objc public var transactionCouponCode: Swift.String?
  @objc public var label: [Swift.String : Any]?
  @objc public var value: Swift.String?
  public init(from data: [Swift.String : Any])
  public func appendAttribute(_ key: Swift.String, value: Any)
  public func appendAttributes(_ attrs: [Swift.String : Any])
  public func setCategory(_ category: OmniSegmentKit.OSGEvent.Category?)
  public func changeHitType(to type: OmniSegmentKit.OSGEvent.HitType)
  @objc deinit
}
extension OmniSegmentKit.OSGEvent {
  @objc public static func appOpen() -> OmniSegmentKit.OSGEvent
  @objc public static func appUnsubscribe() -> OmniSegmentKit.OSGEvent
  @objc public static func productImpression(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func productClicked(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func addToWishlist(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func addToCart(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func removeFromCart(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func checkout(_ products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc(purchaseWithTransactionId:revenue:products:) public static func purchase(_ transactionId: Swift.String, revenue: Foundation.NSNumber, products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc(refundWithTransactionId:revenue:products:) public static func refund(_ transactionId: Swift.String, revenue: Foundation.NSNumber, products: [OmniSegmentKit.OSGProduct]) -> OmniSegmentKit.OSGEvent
  @objc public static func completeRegistration(label: [Swift.String : Any]) -> OmniSegmentKit.OSGEvent
  @objc public static func search(label: [Swift.String : Any]) -> OmniSegmentKit.OSGEvent
  @objc(customWithAction:value:) public static func custom(action: Swift.String, value: Swift.String? = nil) -> OmniSegmentKit.OSGEvent
}
@available(iOS 13, *)
extension WebKit.WKWebViewConfiguration {
  @_Concurrency.MainActor @preconcurrency public func addOmniSegmentContentController()
}
@_inheritsConvenienceInitializers @available(iOS 13, *)
@objc(OSGWebViewConfigurationExtension) public class OSGWebViewConfigurationExtension : ObjectiveC.NSObject {
  @objc public static func addOmniSegmentContentController(_ configuration: WebKit.WKWebViewConfiguration)
  @objc override dynamic public init()
  @objc deinit
}
extension OmniSegmentKit.OSGEventSource : Swift.Equatable {}
extension OmniSegmentKit.OSGEventSource : Swift.Hashable {}
extension OmniSegmentKit.OSGEventSource : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventHitType : Swift.Equatable {}
extension OmniSegmentKit.OSGEventHitType : Swift.Hashable {}
extension OmniSegmentKit.OSGEventHitType : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventAction : Swift.Equatable {}
extension OmniSegmentKit.OSGEventAction : Swift.Hashable {}
extension OmniSegmentKit.OSGEventAction : Swift.RawRepresentable {}
extension OmniSegmentKit.OSGEventCategory : Swift.Equatable {}
extension OmniSegmentKit.OSGEventCategory : Swift.Hashable {}
extension OmniSegmentKit.OSGEventCategory : Swift.RawRepresentable {}
